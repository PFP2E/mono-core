# /www/Containerfile
# The build context is the 'demo' directory.

# =================================================================
# STAGE 1: Base Image
# =================================================================
FROM oven/bun:1-slim AS base
LABEL project="pfp2e-demo" stage="base"
# Set a consistent workdir that matches the old, working file's logic.
WORKDIR /app/www

# =================================================================
# STAGE 2: Dependencies
# This stage installs all dependencies needed for building.
# =================================================================
FROM base AS deps
LABEL project="pfp2e-demo" stage="deps"
# Copy manifests and config from the 'www' subdir of the context.
# The WORKDIR is /app/www, so they are copied into there.
COPY www/package.json www/bun.lock www/bunfig.toml ./
# Install all dependencies
RUN bun install --frozen-lockfile

# =================================================================
# STAGE 3: Builder
# This stage builds the application. It uses the deps stage as a base,
# so it already has node_modules installed in the correct place.
# =================================================================
FROM deps AS builder
LABEL project="pfp2e-demo" stage="builder"
# Copy the rest of the source code, overwriting the manifests
# but leaving node_modules intact.
COPY www ./
# Run the build
RUN bun run build

# =================================================================
# STAGE 4: Final Production Image (Standalone)
# =================================================================
FROM oven/bun:1-slim AS prod-server
LABEL project="pfp2e-demo" stage="prod-server"
WORKDIR /app
ENV NODE_ENV=production
ENV HOSTNAME=0.0.0.0
# Install curl for a reliable healthcheck
USER root
RUN apt-get update && apt-get install -y curl && rm -rf /var/lib/apt/lists/*
USER bun
# Copy the standalone output from the builder stage
COPY --chown=bun:bun --from=builder /app/www/.next/standalone .
# Copy the static public assets from the builder stage
COPY --chown=bun:bun --from=builder /app/www/public ./public
# Copy the static assets from the builder stage
COPY --chown=bun:bun --from=builder /app/www/.next/static ./.next/static
EXPOSE 3000
HEALTHCHECK --interval=5s --timeout=5s --start-period=5s --retries=3 CMD curl -f http://localhost:3000/ || exit 1
# The start command is run from the standalone server.js
CMD ["node", "server.js"]

# =================================================================
# STAGE 5: Final Test Runner Image
# =================================================================
FROM mcr.microsoft.com/playwright:v1.53.1-noble AS test-runner
LABEL project="pfp2e-demo" stage="test-runner"
WORKDIR /app/www
# Copy bun executable from the base stage
COPY --from=base /usr/local/bin/bun /usr/local/bin/bun
# Copy dependencies from our deps stage
COPY --from=deps /app/www/node_modules ./node_modules
# Copy test-related files from the 'www' subdir of the context
COPY www/package.json www/bun.lock ./
COPY www/playwright.config.ts .
COPY www/tsconfig.json .
COPY www/tests-ui ./tests-ui
# The test command is run from compose against the prod service.
CMD ["bun", "run", "test:ui"]
