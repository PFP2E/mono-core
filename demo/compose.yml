name: pfp2e-demo

services:
  # The production web server.
  prod:
    build:
      context: .
      dockerfile: www/Containerfile
      target: prod-server
    image: pfp2e-demo/app:prod
    container_name: pfp2e-demo-prod
    # Explicitly set the correct command to run the standalone server.
    command: node server.js
    ports:
      - "3000:3000"
    env_file:
      - www/.env
    networks:
      - pfp2e-demo-net
    profiles:
      - prod
      - test

  # The test runner for UI/E2E tests.
  # Run it with: docker compose --profile test run --rm test
  test:
    build:
      context: .
      dockerfile: www/Containerfile
      target: test-runner
    image: pfp2e-demo/app:test
    container_name: pfp2e-demo-test-runner
    depends_on:
      prod:
        condition: service_healthy
    environment:
      - PLAYWRIGHT_TEST_BASE_URL=http://prod:3000
    init: true
    ipc: host
    networks:
      - pfp2e-demo-net
    profiles:
      - test

  # The development server with hot-reloading.
  dev:
    build:
      context: .
      dockerfile: www/Containerfile
      # Use a minimal base with just dependencies installed.
      target: deps
    image: pfp2e-demo/app:dev
    container_name: pfp2e-demo-dev
    user: root
    ports:
      - "3000:3000"
    env_file:
      - www/.env
    volumes:
      # Mount source code for hot-reloading
      - ./www:/app/www
      # Persist node_modules to avoid reinstalling on every start
      - node_modules:/app/www/node_modules
    working_dir: /app/www
    stdin_open: true
    tty: true
    # The command now just starts the dev server.
    # Dependencies are managed by the image and volume.
    command: sh -c "bun run dev"
    networks:
      - pfp2e-demo-net
    profiles:
      - dev

volumes:
  node_modules:

networks:
  pfp2e-demo-net:
    name: pfp2e-demo-net
